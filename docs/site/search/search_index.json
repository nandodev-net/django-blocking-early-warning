{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Early Warnings The Early Warnings App it's a django app to check for anomalies in web connectivity measurements for web pages using Ooni data, and is maintained by the Venezuelan NGO Venezuela Inteligente . We aim to provide additional features on the top of the excellent Ooni service that might be useful for digital rights activists around the world. Highlights This app aims to be reusable in your own django projects, as well as a stand alone app. In both cases, the main features are the following: Sending email notifications whenever a blocking event occurs Analysis of aggregated data, trying to find patterns common to generalized blocking events Graphs and tools to visualize stored data Defining multiple lists of urls that can be automatically updated Getting Started You can use this app either as a stand alone Django app using docker, or as modular app that you can install in your own Django project. In the following tutorial you will learn how to install it in the way that better fits your use case Installing as a standalone app WIP: Standalone installation coming soon Installing as part of your Django project The early warnings app is a regular django app like many others, so the process it's pretty much the same as with any app: Download the the code from the official repository git clone https://github.com/VEinteligente/django-blocking-early-warning.git Install the django package with pip , you have to specify the path to the cloned directory pip install -e /path/to/django-blocking-early-warning Back in your django project, you just have to add this app as you'd do with any django app. The first step is add the early warnings app to your installed apps # settings.py INSTALLED_APPS = [ # Your other apps \"blocking_early_warnings\" # new ] Now you have to add early warnings urls to your site : # urls.py # ... from django.urls import path, include urlpatterns = [ # Your other url patterns # Note that you might want to change the prefix here so the match # your project's guidelines path(\"early_warnings/\", include(\"blocking_early_warnings.urls\")) # new ] Note Note that this step is entirely optional as you might want to manage urls and views yourself, so feel free to skip it to follow a more suitable installation for you. Otherwise, this is the simplest default installation. And last but not least, we have to run migrations to add the database tables required by early warnings: python manage.py makemigrations blocking_early_warnings python manage.py migrate And that's it, you now have the app succesfully installed in your project. You can check if everything's ok by running your server with python manage.py runserver and going to your admin panel, by default in http://127.0.0.1:8000/admin/ and check for the new tables:","title":"Home"},{"location":"#early-warnings","text":"The Early Warnings App it's a django app to check for anomalies in web connectivity measurements for web pages using Ooni data, and is maintained by the Venezuelan NGO Venezuela Inteligente . We aim to provide additional features on the top of the excellent Ooni service that might be useful for digital rights activists around the world.","title":"Early Warnings"},{"location":"#highlights","text":"This app aims to be reusable in your own django projects, as well as a stand alone app. In both cases, the main features are the following: Sending email notifications whenever a blocking event occurs Analysis of aggregated data, trying to find patterns common to generalized blocking events Graphs and tools to visualize stored data Defining multiple lists of urls that can be automatically updated","title":"Highlights"},{"location":"#getting-started","text":"You can use this app either as a stand alone Django app using docker, or as modular app that you can install in your own Django project. In the following tutorial you will learn how to install it in the way that better fits your use case","title":"Getting Started"},{"location":"#installing-as-a-standalone-app","text":"WIP: Standalone installation coming soon","title":"Installing as a standalone app"},{"location":"#installing-as-part-of-your-django-project","text":"The early warnings app is a regular django app like many others, so the process it's pretty much the same as with any app: Download the the code from the official repository git clone https://github.com/VEinteligente/django-blocking-early-warning.git Install the django package with pip , you have to specify the path to the cloned directory pip install -e /path/to/django-blocking-early-warning Back in your django project, you just have to add this app as you'd do with any django app. The first step is add the early warnings app to your installed apps # settings.py INSTALLED_APPS = [ # Your other apps \"blocking_early_warnings\" # new ] Now you have to add early warnings urls to your site : # urls.py # ... from django.urls import path, include urlpatterns = [ # Your other url patterns # Note that you might want to change the prefix here so the match # your project's guidelines path(\"early_warnings/\", include(\"blocking_early_warnings.urls\")) # new ] Note Note that this step is entirely optional as you might want to manage urls and views yourself, so feel free to skip it to follow a more suitable installation for you. Otherwise, this is the simplest default installation. And last but not least, we have to run migrations to add the database tables required by early warnings: python manage.py makemigrations blocking_early_warnings python manage.py migrate And that's it, you now have the app succesfully installed in your project. You can check if everything's ok by running your server with python manage.py runserver and going to your admin panel, by default in http://127.0.0.1:8000/admin/ and check for the new tables:","title":"Installing as part of your Django project"},{"location":"user_guide/anomaly_types/","text":"","title":"Anomaly types"},{"location":"user_guide/url_lists/","text":"URL Lists One of the key features of the Early Warnings system is the hability to schedule measurements for specific urls that might be interesting. Also, the way those urls are loaded might be different between use cases. For this reason, we provide at the least 3 ways to provide a list of urls according of it's storage type. Storage types Lists can specify their type of storage, (where they are loaded from). This way you can provide it with a path in your local disk where you edit the list's urls on the fly, or you can use a third party list like citizen lab's . Or you can simply go into the admin panel and add urls manually to a database-stored list. Database The database (db) storage allows you to just add urls to this list from the webpage. To add an URL to a database list, you go to the url table in django admin panel: And here you can find an existent url or add new one by clicking in the \"ADD URL +\" button and filling the required fields. Either way, in the URL edition page you can add this url to a list by selecting the list itself and clicking save: Note The storage type is not important in this case since urls are just stored in the local database. Specifying a storage type for a database-based list will result in an error . Web request This method will sync urls with a list that can be found by a web request to a specified url. The list should be provided as raw text and follow one of the supported formats. For example, we use the csv list maintained by Citizen lab that can be found in https://raw.githubusercontent.com/citizenlab/test-lists/master/lists/ve.csv . This way the system can be kept in sync without human intervention. This is useful in cases like this where the list is provided by a third party, or when you want the list publicly available so that multiple users can share the same list. Web Request lists are fetched in regular intervals to keep them on sync. The valid data formats for a list are the following: Citizen Lab Csv : a csv file that contains the url in the first column, just like this from citizen lab. Url List Txt : A txt file with a different url per line, for example: http://fncancer.org.ve/ https://futuropresente.com.ve/ http://www.orinoco.org/ http://cedema.org/ http://complotmagazine.com/ http://dialogo-americas.com/ https://globovision.com/ http://nmidigital.com/ http://www.descifrado.com/ Local Storage Is the same as a Web Request based, but the lists are retrieved from disk instead of using a web request, so you provide an absolute path in the server's disk to a file with a supported format (same formats as web request). Creating a new list To create a new list, go to the admin panel and select \"Url lists\" table: Here you can manage your lists. In this case, we're going to create a new one. Click the \"ADD URL LIST +\" button in the top right corner of the page and we will go the list creation view: This field is just a human-readable name for your list, it should be unique among other lists Here you specify how to retrieve the list content (see storage types ). If it is a web request based , then you use an url. If it is local storage based , then you use an absolute path in your local disk If it is Database based , then ignore this field. Parse strategy tells the system how to read the list files when the storage type is eiter web request or local storage . Ignore if not any of this. This field tells the system how this list will store its urls.","title":"URL Lists"},{"location":"user_guide/url_lists/#url-lists","text":"One of the key features of the Early Warnings system is the hability to schedule measurements for specific urls that might be interesting. Also, the way those urls are loaded might be different between use cases. For this reason, we provide at the least 3 ways to provide a list of urls according of it's storage type.","title":"URL Lists"},{"location":"user_guide/url_lists/#storage-types","text":"Lists can specify their type of storage, (where they are loaded from). This way you can provide it with a path in your local disk where you edit the list's urls on the fly, or you can use a third party list like citizen lab's . Or you can simply go into the admin panel and add urls manually to a database-stored list.","title":" Storage types"},{"location":"user_guide/url_lists/#database","text":"The database (db) storage allows you to just add urls to this list from the webpage. To add an URL to a database list, you go to the url table in django admin panel: And here you can find an existent url or add new one by clicking in the \"ADD URL +\" button and filling the required fields. Either way, in the URL edition page you can add this url to a list by selecting the list itself and clicking save: Note The storage type is not important in this case since urls are just stored in the local database. Specifying a storage type for a database-based list will result in an error .","title":"Database"},{"location":"user_guide/url_lists/#web-request","text":"This method will sync urls with a list that can be found by a web request to a specified url. The list should be provided as raw text and follow one of the supported formats. For example, we use the csv list maintained by Citizen lab that can be found in https://raw.githubusercontent.com/citizenlab/test-lists/master/lists/ve.csv . This way the system can be kept in sync without human intervention. This is useful in cases like this where the list is provided by a third party, or when you want the list publicly available so that multiple users can share the same list. Web Request lists are fetched in regular intervals to keep them on sync. The valid data formats for a list are the following: Citizen Lab Csv : a csv file that contains the url in the first column, just like this from citizen lab. Url List Txt : A txt file with a different url per line, for example: http://fncancer.org.ve/ https://futuropresente.com.ve/ http://www.orinoco.org/ http://cedema.org/ http://complotmagazine.com/ http://dialogo-americas.com/ https://globovision.com/ http://nmidigital.com/ http://www.descifrado.com/","title":"Web request"},{"location":"user_guide/url_lists/#local-storage","text":"Is the same as a Web Request based, but the lists are retrieved from disk instead of using a web request, so you provide an absolute path in the server's disk to a file with a supported format (same formats as web request).","title":"Local Storage"},{"location":"user_guide/url_lists/#creating-a-new-list","text":"To create a new list, go to the admin panel and select \"Url lists\" table: Here you can manage your lists. In this case, we're going to create a new one. Click the \"ADD URL LIST +\" button in the top right corner of the page and we will go the list creation view: This field is just a human-readable name for your list, it should be unique among other lists Here you specify how to retrieve the list content (see storage types ). If it is a web request based , then you use an url. If it is local storage based , then you use an absolute path in your local disk If it is Database based , then ignore this field. Parse strategy tells the system how to read the list files when the storage type is eiter web request or local storage . Ignore if not any of this. This field tells the system how this list will store its urls.","title":"Creating a new list"},{"location":"user_guide/user_guide/","text":"User guide In the following sections you will learn which kind of data the Early Warnings system can provide, and how to manage it. We will also learn about key features and how we can use it to detect censorship events.","title":"User guide"},{"location":"user_guide/user_guide/#user-guide","text":"In the following sections you will learn which kind of data the Early Warnings system can provide, and how to manage it. We will also learn about key features and how we can use it to detect censorship events.","title":"User guide"}]}